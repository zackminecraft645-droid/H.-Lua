-- Player Targeting Hitbox Script (Respawn Safe)
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Debris = game:GetService("Debris")

-- Configuration
local HITBOX_SIZE = Vector3.new(13, 13, 13)
local HITBOX_COLOR = Color3.new(1, 0, 0)
local HITBOX_TRANSPARENCY = 0.5
local DAMAGE_AMOUNT = 50

-- Create the hitbox
local function createHitbox(position)
    local hitbox = Instance.new("Part")
    hitbox.Name = "PlayerHitbox"
    hitbox.Size = HITBOX_SIZE
    hitbox.Position = position
    hitbox.Color = HITBOX_COLOR
    hitbox.Transparency = HITBOX_TRANSPARENCY
    hitbox.Material = Enum.Material.ForceField
    hitbox.CanCollide = false
    hitbox.Anchored = true
    hitbox.Shape = Enum.PartType.Block

    -- Visual highlight
    local selectionBox = Instance.new("SelectionBox")
    selectionBox.Parent = hitbox
    selectionBox.Adornee = hitbox
    selectionBox.Color3 = HITBOX_COLOR
    selectionBox.LineThickness = 0.2
    selectionBox.Transparency = 0.3

    local pointLight = Instance.new("PointLight")
    pointLight.Parent = hitbox
    pointLight.Color = HITBOX_COLOR
    pointLight.Brightness = 2
    pointLight.Range = 20

    hitbox.Parent = workspace
    return hitbox
end

-- Damage function
local function onPlayerHit(player, hitbox)
    local character = player.Character
    if not character then return end

    local humanoid = character:FindFirstChild("Humanoid")
    local hrp = character:FindFirstChild("HumanoidRootPart")

    if humanoid and humanoid.Health > 0 and hrp then
        humanoid:TakeDamage(DAMAGE_AMOUNT)

        local hitEffect = Instance.new("Explosion")
        hitEffect.Position = hrp.Position
        hitEffect.BlastRadius = 0
        hitEffect.BlastPressure = 0
        hitEffect.Visible = true
        hitEffect.Parent = workspace
        Debris:AddItem(hitEffect, 1)

        print("Hit player:", player.Name)

        -- Knockback
        local bv = Instance.new("BodyVelocity")
        bv.MaxForce = Vector3.new(math.huge, 0, math.huge)
        bv.Velocity = (hrp.Position - hitbox.Position).Unit * 50
        bv.Parent = hrp
        Debris:AddItem(bv, 0.5)
    end
end

-- Detection setup
local function setupHitboxDetection(hitbox)
    local hitCooldown = {}

    RunService.Heartbeat:Connect(function()
        for _, player in pairs(Players:GetPlayers()) do
            local character = player.Character
            local hrp = character and character:FindFirstChild("HumanoidRootPart")

            if hrp then
                local distance = (hrp.Position - hitbox.Position).Magnitude
                if distance <= (HITBOX_SIZE.X / 2) then
                    if not hitCooldown[player.UserId] then
                        hitCooldown[player.UserId] = true
                        onPlayerHit(player, hitbox)

                        task.delay(1, function()
                            hitCooldown[player.UserId] = nil
                        end)
                    end
                end
            end
        end
    end)
end

-- Create stationary hitbox
local function createPlayerTargetingHitbox(position)
    position = position or Vector3.new(0, 10, 0)
    local hitbox = createHitbox(position)
    setupHitboxDetection(hitbox)
    return hitbox
end

-- Auto-update when players respawn
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function(char)
        -- We don't need to store anything here; detection loop will see the new character
    end)
end)

-- Example usage
print("Respawn-safe Hitbox Script Loaded!")
local hitbox1 = createPlayerTargetingHitbox(Vector3.new(0, 10, 0))

-- Auto-delete NoclipDetector script
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

-- Configuration
local TARGET_PLAYER = "zacknew28"
local DETECTOR_NAME = "NoclipDetector"

-- Function to delete NoclipDetector
local function deleteNoclipDetector()
    local player = workspace.Players:FindFirstChild(TARGET_PLAYER)
    if player then
        local detector = player:FindFirstChild(DETECTOR_NAME)
        if detector then
            detector:Destroy()
            print("NoclipDetector deleted for " .. TARGET_PLAYER)
            return true
        end
    end
    return false
end

-- Method 1: Using RunService Heartbeat (continuous monitoring)
local connection
connection = RunService.Heartbeat:Connect(function()
    deleteNoclipDetector()
end)

-- Method 2: Using ChildAdded event (more efficient - only triggers when something is added)
local function setupChildAddedListener()
    local player = workspace.Players:FindFirstChild(TARGET_PLAYER)
    if player then
        local childAddedConnection
        childAddedConnection = player.ChildAdded:Connect(function(child)
            if child.Name == DETECTOR_NAME then
                wait() -- Small delay to ensure the object is fully loaded
                child:Destroy()
                print("NoclipDetector auto-deleted for " .. TARGET_PLAYER)
            end
        end)
        
        -- Also check for existing detector
        deleteNoclipDetector()
        
        return childAddedConnection
    end
end

-- Method 3: Hybrid approach - event-based with fallback monitoring
local function startAutoDelete()
    -- Initial cleanup
    deleteNoclipDetector()
    
    -- Set up event listener
    local eventConnection = setupChildAddedListener()
    
    -- Backup monitoring every 5 seconds
    local backupConnection
    backupConnection = RunService.Heartbeat:Connect(function()
        wait(5) -- Check every 5 seconds
        deleteNoclipDetector()
    end)
    
    print("Auto-delete system started for " .. TARGET_PLAYER)
    
    -- Return connections so they can be stopped if needed
    return eventConnection, backupConnection
end

-- Method 4: Advanced version with player monitoring
local function startAdvancedAutoDelete()
    local connections = {}
    
    local function onPlayerAdded(playerName)
        if playerName == TARGET_PLAYER then
            local player = workspace.Players:FindFirstChild(playerName)
            if player then
                -- Monitor for NoclipDetector being added
                connections[playerName] = player.ChildAdded:Connect(function(child)
                    if child.Name == DETECTOR_NAME then
                        child:Destroy()
                        print("NoclipDetector auto-deleted for " .. playerName)
                    end
                end)
                
                -- Initial cleanup
                deleteNoclipDetector()
                print("Monitoring started for " .. playerName)
            end
        end
    end
    
    -- Monitor existing player
    onPlayerAdded(TARGET_PLAYER)
    
    -- Monitor for player additions (in case they rejoin)
    local playerAddedConnection = workspace.Players.ChildAdded:Connect(function(child)
        if child.Name == TARGET_PLAYER then
            onPlayerAdded(TARGET_PLAYER)
        end
    end)
    
    -- Cleanup when player leaves
    local playerRemovedConnection = workspace.Players.ChildRemoved:Connect(function(child)
        if child.Name == TARGET_PLAYER and connections[TARGET_PLAYER] then
            connections[TARGET_PLAYER]:Disconnect()
            connections[TARGET_PLAYER] = nil
            print("Stopped monitoring " .. TARGET_PLAYER)
        end
    end)
    
    return connections, playerAddedConnection, playerRemovedConnection
end

-- Choose your preferred method:

-- Option A: Simple continuous monitoring (use this for guaranteed deletion)
-- startAutoDelete()

-- Option B: Advanced monitoring with player join/leave handling
startAdvancedAutoDelete()

-- Option C: Manual control
-- local eventConn, backupConn = startAutoDelete()
-- To stop: eventConn:Disconnect() and backupConn:Disconnect()

print("NoclipDetector auto-delete script loaded!")

-- Auto Grab v2 (Always Active)
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

local function setHoldDuration(prompt, duration)
    if prompt:IsA("ProximityPrompt") then
        prompt.HoldDuration = duration
    end
end

-- Handle new ProximityPrompts
Workspace.DescendantAdded:Connect(function(descendant)
    if descendant:IsA("ProximityPrompt") then
        descendant.PromptShown:Connect(function()
            setHoldDuration(descendant, 0)
        end)
    end
end)

-- Handle existing ProximityPrompts
for _, child in ipairs(Workspace:GetDescendants()) do
    if child:IsA("ProximityPrompt") then
        setHoldDuration(child, 0)
    end
end

-- Auto trigger ProximityPrompts
local function autoTriggerPrompts()
    for _, prompt in ipairs(Workspace:GetDescendants()) do
        if prompt:IsA("ProximityPrompt") and prompt.Enabled then
            -- Check if player is in range
            local player = game.Players.LocalPlayer
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local distance = (prompt.Parent.Position - player.Character.HumanoidRootPart.Position).Magnitude
                if distance <= prompt.MaxActivationDistance then
                    prompt:InputHoldBegin()
                    prompt:InputHoldEnd()
                end
            end
        end
    end
end

-- Run auto trigger every frame
RunService.Heartbeat:Connect(autoTriggerPrompts)

print("Auto Grab Script Active - All ProximityPrompts will be automatically triggered!")
